!SESSION 2023-05-11 09:20:37.452 -----------------------------------------------
eclipse.buildId=3.9.18.202109141335-RELEASE-e420
java.version=11.0.18
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.springsource.sts.ide
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springsource.sts.ide

This is a continuation of log file C:\embedded_yh\embedded_yh_jsp_spring\work2\.metadata\.bak_1.log
Created Time: 2023-05-11 15:31:01.898

!ENTRY org.eclipse.contribution.weaving.jdt 4 0 2023-05-11 15:31:01.899
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:103)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 21 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:103)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-05-11 15:31:01.900
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:103)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more

!ENTRY org.eclipse.contribution.weaving.jdt 4 0 2023-05-11 15:31:04.903
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 21 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-05-11 15:31:04.905
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more

!ENTRY org.eclipse.contribution.weaving.jdt 4 0 2023-05-11 15:31:04.906
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:103)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 21 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:103)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2023-05-11 15:31:04.907
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import service.BoardService;
import util.Common;
import util.Paging;
import vo.BoardVO;
import vo.UserVO;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class BoardController {
    private BoardService service;

    @Autowired
    private ServletContext app;

    @Autowired
    private HttpSession session;

    @Autowired
    public BoardController(BoardService service) {
        this.service = service;
    } // end of constructor

    @RequestMapping("board_list.do")
    public String board_list(Model model, String page, String search, String search_text){
        System.out.println("===== board_list.do =====");

        int nowPage = 1;

        if(page != null && !page.isEmpty()) {
            nowPage = Integer.parseInt(page);
        }

        // 한 페이지에 표시될 게시물의 시작과 끝 번호를 계산
        // 1페이지 : 1 ~ 5 까지의 게시글
        // 2페이지 : 6 ~ 10 까지의 게시글
        int start = (nowPage - 1) * Common.Board.BLOCKLIST + 1;
        int end = start + Common.Board.BLOCKLIST - 1;

        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("start", start);
        map.put("end", end);

        // 페이지 select
        Map<String, Object> board_map = service.board_list(map);
        System.out.println("board_map : " + board_map);
        System.out.println("board_list : " + board_map.get("board_list"));
        System.out.println("user_list : " + board_map.get("user_list"));

        // 페이지 메뉴 생성
        int row_total = service.getRowTotal(map);

        String search_param = String.format("search=%s&search_text=%s", search, search_text);

        String pageMenu = Paging.getPaging("board_list.do", nowPage, row_total, search_param, Common.Board.BLOCKLIST, Common.Board.BLOCKPAGE);

        // System.out.println("pageMenu : " + pageMenu);
        model.addAttribute("pageMenu", pageMenu);
        model.addAttribute("board_map", board_map);

        session.removeAttribute("readhitCheck");

        return Common.Board.VIEW_PATH + "board_list.jsp";
    } // end of board_list()

    @RequestMapping("board_detail_view.do")
    public String board_detail(Model model, int board1_idx, int user1_idx){
        System.out.println("===== board_detail.do =====");
        System.out.println("board_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);

        String readhitCheck = (String) session.getAttribute("readhitCheck");

        if(readhitCheck == null){
            int res = service.board_modify_readhit(board1_idx);
            session.setAttribute("readhitCheck", "");
        }

        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_detail.jsp";
    } // end of board_detail()

    @RequestMapping("board_write.do")
    public String board_write(){
        return Common.Board.VIEW_PATH + "board_write.jsp";
    } // end of board_write()


    @RequestMapping("board_insert.do")
    public String board_insert(BoardVO board_vo){
        System.out.println("===== board_insert =====");
        System.out.println("board_vo : " + board_vo);
        System.out.println("user1_idx : " + board_vo.getUser1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();
        System.out.println("board1_photo : " + board_photo);

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }

        int user1_idx = board_vo.getUser1_idx();
        System.out.println("board_subject : " + board_vo.getBoard1_subject());
        System.out.println("board_content : " + board_vo.getBoard1_content());
        System.out.println("board_readhit : " + board_vo.getBoard1_readhit());
        System.out.println("board_ref : " + board_vo.getBoard1_ref());
        System.out.println("board_step : " + board_vo.getBoard1_step());
        System.out.println("board_depth : " + board_vo.getBoard1_depth());

        board_vo.setBoard1_filename(board_filename);
        int res = service.board_insert(board_vo);
        System.out.println("res : " + res);

        return "redirect:/board_list.do";
    } // end of board_insert()

    @RequestMapping("board_reply_view.do")
    public String board_reply_view(Model model, int board1_idx, int user1_idx){
        System.out.println("----- board_reply_view.do -----");
        System.out.println("board1_idx : " + board1_idx);
        System.out.println("user1_idx : " + user1_idx);
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_reply_write.jsp";
    } // end of board_reply_view()

    @RequestMapping("board_reply_insert.do")
    public String board_reply_insert(Model model, BoardVO board_vo){
        System.out.println("------ board_reply_insert ------");
        System.out.println("board1_idx : " + board_vo.getBoard1_idx());

        // 원본글 검색 후 저장
        BoardVO originBoard_vo = service.board_selectOne(board_vo.getBoard1_idx());

        // 기존글 step 모두 +1
        int res_step = service.board_update_step(originBoard_vo);

        board_vo.setBoard1_readhit(0);
        board_vo.setBoard1_ref(originBoard_vo.getBoard1_ref());
        board_vo.setBoard1_step(originBoard_vo.getBoard1_step() + 1);
        board_vo.setBoard1_depth(originBoard_vo.getBoard1_depth() + 1);

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res_reply = service.board_insert_reply(board_vo);

        return "redirect:/board_detail_view.do?board1_idx=" + Integer.toString(originBoard_vo.getBoard1_idx()) + "&user1_idx=" + Integer.toString(originBoard_vo.getUser1_idx());
    } // end of board_reply_insert()

    @RequestMapping("board_modify_form.do")
    public String board_modify_form(Model model, int board1_idx, int user1_idx){
        System.out.println("------ board_modify_form.do ------");
        BoardVO board_vo = service.board_selectOne(board1_idx);
        UserVO user_vo = service.user_selectOne(user1_idx);
        System.out.println("board_vo : " + board_vo);
        System.out.println("user_vo : " + user_vo);

        model.addAttribute("board_vo", board_vo);
        model.addAttribute("user_vo", user_vo);

        return Common.Board.VIEW_PATH + "board_modify_form.jsp";
    } // end of board_modify_form()

    @RequestMapping("board_modify.do")
    public String board_modify(BoardVO board_vo){
        System.out.println("----- board_modify.do -----");
        System.out.println("board_vo.board1_idx : " + board_vo.getBoard1_idx());

        String webPath = "/resources/upload/";
        String savePath = app.getRealPath(webPath);
        System.out.println("절대경로 : " + savePath);

        // 업로드된 파일 정보
        MultipartFile board_photo = board_vo.getBoard1_photo();

        String board_filename = "no_file";

        if(!board_photo.isEmpty()){
            // DB에 추가할 실제 파일 이름
            board_filename = board_photo.getOriginalFilename();

            // 파일을 저장할 절대경로
            File saveFile = new File(savePath, board_filename);
            if(!saveFile.exists()){
                saveFile.mkdirs(); // 절대경로에 upload라는 이름의 폴더를 생성한다.
                // 그냥 두면 이미지 파일이 만들어 지는게 아니라 폴더로 다 만들어 진다.
            } else {
                // 동일파일일 경우 현재 업로드 시간을 붙여서 이름변경
                long time = System.currentTimeMillis();
                board_filename = String.format("%d_%s", time, board_filename);
                saveFile = new File(savePath, board_filename);
            }

            try {
                // 업로드를 요청한 파일은 MultipartResolver클래스가 임시저장소에 보관한다.
                // 임시 저장소에 보관된 파일은 일정 시간이 지나면 사라지므로, 절대경로 위치에
                // 이미지를 물리적으로 복사해 넣어야 한다.
                board_photo.transferTo(saveFile);

            } catch (Exception e){
                e.printStackTrace();
            }
        }
        board_vo.setBoard1_filename(board_filename);

        int res = service.board_modify(board_vo);

        return "redirect:/board_detail.do?board1_idx=" + board_vo.getBoard1_idx() + "&user1_idx=" + board_vo.getUser1_idx();
    } // end of board_modify()

} // end of class





























----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface Buy {
	String CART_IN="/WEB-INF/views/cart/cart_in.jsp";
	String PAY="/WEB-INF/views/pay/";
	String PAY_READY=PAY+"pay_ready.jsp";
	String PAY_RESPONSE=PAY+"pay_response.jsp";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BuyDAO;
import util.Buy;
import util.NicePayKey;
import vo.FullViewVO;
import vo.OrderListVO;
import vo.UserVO;

@Controller
public class BuyController implements Buy, NicePayKey {

	@Autowired
	ServletContext app;

	@Autowired
	BuyDAO buydao;

	@RequestMapping("/buy_product.do")
	@ResponseBody
	public int buyProduct(int idx) {
		return buydao.selectProduct(idx).getProduct_price();
	}

	@RequestMapping("/cartAdd.do")
	public void cartAdd(int idx, int amount, int price, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		if (cart == null) {
			cart = new ArrayList<OrderListVO>();
		}

		boolean isExist = false;
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				isExist = true;
				break;
			}
		}
		if (!isExist) {
			OrderListVO cart_input = new OrderListVO();
			cart_input.setProduct_idx(idx);
			cart_input.setProduct_amount(amount);
			cart.add(cart_input);
		}
		session.setAttribute("cart", cart);
		try {
			response.sendRedirect("cart.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("/cart.do")
	public String Cart_In(HttpServletRequest request, Model model) {
		List<OrderListVO> cart = (List<OrderListVO>) (request.getSession().getAttribute("cart"));
		List<FullViewVO> cart_in = buydao.selectProducts(cart);
		for (FullViewVO i : cart_in) {
			for (OrderListVO j : cart) {
				if (i.getProduct_idx() == j.getProduct_idx())
					i.setProduct_amount(j.getProduct_amount());
			}
		}
		model.addAttribute("cart_in", cart_in);
		return CART_IN;
	}

	@RequestMapping("/remove_cart_in.do")
	@ResponseBody
	public void Remove_Cart_In(int idx, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				break;
			}
		}
		session.setAttribute("cart", cart);
	}

	@RequestMapping(value = "/findProdcerName.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public String[] findProdcerName(@RequestBody Map<String, Object> data) {
		List<Integer> idxs = (ArrayList<Integer>) (data.get("idxs"));
		String[] names = new String[idxs.size()];
		for (int i = 0; i < idxs.size(); i++) {
			if (idxs.get(i) != 0) {
				names[i] = buydao.selectProducer(idxs.get(i)).getProducer_name();
			}
		}
		return names;
	}

	@RequestMapping("/fixAmount.do")
	@ResponseBody
	public void fixAmount(int idx, int amount, HttpServletRequest request) {
		HttpSession session = request.getSession();
		List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));

		for (OrderListVO item : cart) {
			if (item.getProduct_idx() == idx) {
				cart.remove(item);
				item.setProduct_amount(amount);
				cart.add(item);
				break;
			}
		}

		session.setAttribute("cart", cart);
	}

	@RequestMapping("/pay_ready1.do")
	public String Buying(int amount, int idx, int price, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = new ArrayList<OrderListVO>();
			OrderListVO item = new OrderListVO();
			item.setUser_idx(user.getUser1_idx());
			item.setOrderlist_date(date);
			item.setProduct_amount(amount);
			item.setProduct_idx(idx);
			item.setOrderlist_addr(user.getUser1_addr());
			item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			cart.add(item);
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(idx).getProducer_name());
			model.addAttribute("cost", price);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());
		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;
	}

	@RequestMapping("/pay_readys.do")
	public String Buying(int cost, HttpServletRequest request, HttpServletResponse response, Model model) {
		HttpSession session = request.getSession();
		try {
			UserVO user = (UserVO) session.getAttribute("user1");
			Timestamp date = buydao.Sysdate();
			List<OrderListVO> cart = (List<OrderListVO>) (session.getAttribute("cart"));
			for (int i = 0; i < cart.size(); i++) {
				OrderListVO item = cart.get(i);
				item.setOrderlist_date(date);
				item.setUser_idx(user.getUser1_idx());
				item.setOrderlist_addr(user.getUser1_addr());
				item.setOrderlist_phonenumber(user.getUser1_phonenumber());
			}
			buydao.insertOrder(cart);
			session.removeAttribute("cart");
			model.addAttribute("date", date);
			model.addAttribute("size", cart.size());
			model.addAttribute("name", buydao.selectProduct(cart.get(0).getProduct_idx()).getProducer_name());
			model.addAttribute("cost", cost);
			model.addAttribute("clientId",CLIENT_ID);
			model.addAttribute("orderId",UUID.randomUUID());

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendRedirect("login.do");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		return PAY_READY;

	}

	@RequestMapping("pay.do")
	public void Pay(String user1_phonenumber, String flexRadioDefault, String user1_addr, int cost, Timestamp orderdate,
			HttpServletRequest request, HttpServletResponse response) {

		request.getSession().setAttribute("cost", cost);
		request.getSession().setAttribute("date", orderdate);
		OrderListVO vo = new OrderListVO();
		vo.setOrderlist_addr(user1_addr);
		vo.setOrderlist_status(1);
		vo.setOrderlist_phonenumber(user1_phonenumber);
		List<OrderListVO> cart = buydao.selectOrderList(orderdate);
		for (int i = 0; i < cart.size(); i++) {
			OrderListVO item = cart.get(i);
			vo.setOrderlist_idx(item.getOrderlist_idx());
			cart.remove(item);
			item.setOrderlist_phonenumber(user1_phonenumber);
			item.setOrderlist_addr(user1_addr);
			item.setOrderlist_status(1);
			buydao.updateOrderList(vo);
			cart.add(item);

		}
	}
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public interface NicePayKey {
	public final String CLIENT_ID = "S1_76316c4608924bd0b3974ca9b41a8884";
	public final String SECRET_KEY = "e763b8b67ad54302b27d1861deb70e63";
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Paging {
    public static String getPaging(String pageURL, int nowPage, int rowTotal, String searchParam, int blockList, int blockPage){

        int totalPage/*전체페이지수*/,
                startPage/*시작페이지번호*/,
                endPage;/*마지막페이지번호*/

        boolean isPrevPage,isNextPage;
        StringBuffer sb; //모든 상황을 판단하여 HTML코드를 저장할 곳


        isPrevPage=isNextPage=false;
        //입력된 전체 자원을 통해 전체 페이지 수를 구한다..
        totalPage = (int)(rowTotal/blockList);
        if(rowTotal%blockList!=0)totalPage++;


        //만약 잘못된 연산과 움직임으로 인하여 현재 페이지 수가 전체 페이지 수를
        //넘을 경우 강제로 현재페이지 값을 전체 페이지 값으로 변경
        if(nowPage > totalPage)nowPage = totalPage;


        //시작 페이지와 마지막 페이지를 구함.
        startPage = (int)(((nowPage-1)/blockPage)*blockPage+1);
        endPage = startPage + blockPage - 1; //

        //마지막 페이지 수가 전체페이지수보다 크면 마지막페이지 값을 변경
        if(endPage > totalPage)endPage = totalPage;

        //마지막페이지가 전체페이지보다 작을 경우 다음 페이징이 적용할 수 있도록
        //boolean형 변수의 값을 설정
        if(endPage < totalPage) isNextPage = true;
        //시작페이지의 값이 1보다 작으면 이전페이징 적용할 수 있도록 값설정
        if(startPage > 1)isPrevPage = true;

        //HTML코드를 저장할 StringBuffer생성=>코드생성
        sb = new StringBuffer();
//-----그룹페이지처리 이전 --------------------------------------------------------------------------------------------
        if(isPrevPage){
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage-1 );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }
        else {
            sb.append("<nav aria-label=\"Page navigation example\">\n" +
                    "  <ul class=\"pagination justify-content-center\">\n" +
                    "    <li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href=\'" +pageURL+"?page=");
            //sb.append(nowPage - blockPage);
            sb.append( startPage );
            sb.append("&"+searchParam);
            sb.append("'\" aria-label=\"Previous\">\n" +
                    "        <span aria-hidden=\"true\">&laquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>");
        }

//------페이지 목록 출력 -------------------------------------------------------------------------------------------------
        for(int i=startPage; i<= endPage ;i++){
            if(i>totalPage)break;
            if(i == nowPage){ //현재 있는 페이지
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
            else{//현재 페이지가 아니면
                sb.append("<li class=\"page-item\"><a class=\"page-link\" href='");
                sb.append(pageURL+"?page=");
                sb.append(i);
                sb.append("&"+searchParam);
                sb.append("'>");
                sb.append(i);
                sb.append("</a>");
                sb.append("</li>");
            }
        }// end for

        // sb.append("&nbsp; ");

//-----그룹페이지처리 다음 ----------------------------------------------------------------------------------------------
        if(isNextPage){
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL+"?page=");
            sb.append(endPage + 1);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&"+searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
        else {
            sb.append("<li class=\"page-item\">\n" +
                    "      <a class=\"page-link\" href='");
            sb.append(pageURL + "?page=");
            sb.append(endPage);
			/*if(nowPage+blockPage > totalPage)nowPage = totalPage;
			else
				nowPage = nowPage+blockPage;
			sb.append(nowPage);*/
            sb.append("&" + searchParam);
            sb.append("' aria-label=\"Next\">\n" +
                    "        <span aria-hidden=\"true\">&raquo;</span>\n" +
                    "      </a>\n" +
                    "    </li>\n" +
                    "  </ul>\n" +
                    "</nav>");
        }
//---------------------------------------------------------------------------------------------------------------------

        return sb.toString();
    }

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import com.github.scribejava.core.model.OAuth2AccessToken;
import kakaologin.KakaoLoginBO;
import naverlogin.NaverLoginBO;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import service.KakaoLoginService;
import service.TotalService;
import util.Common;
import vo.UserVO;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Controller
public class LoginController {

    @Autowired
    private HttpServletRequest request;

    private HttpSession session;

    private TotalService service;

    private NaverLoginBO naverLoginBO;
    private String apiResult = null;
    private String apiResult2 = null;

    private KakaoLoginBO kakaoLoginBO;
    private KakaoLoginService kakaoLoginService;

    @Autowired
    public void setKakaoLoginService(KakaoLoginService kakaoLoginService) {
        this.kakaoLoginService = kakaoLoginService;
    }

    @Autowired
    public LoginController(TotalService service, NaverLoginBO naverLoginBO, KakaoLoginBO kakaoLoginBO, HttpSession session) {
        this.session = session;
        this.service = service;
        this.naverLoginBO = naverLoginBO;
        this.kakaoLoginBO = kakaoLoginBO;
        System.out.println("naverLoginBO 객체 : " + naverLoginBO);
        System.out.println("kakaoLoginBO 객체 : " + kakaoLoginBO);
    } // end of constructor

    @RequestMapping(value = "/login.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String login(Model model, String check, String user_email, String user_pwd) {
        if(session.getAttribute("user1") != null){
            model.addAttribute("isUser1", "loginState");
            System.out.println("----- 세션 정보 저장됨 -----");
            return Common.Main.VIEW_PATH + "main.jsp";
        }

        model.addAttribute("check", check);
        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);
        System.out.println("----- login.do -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of login()

    @RequestMapping(value = "/naverUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String naverAuthUrl = naverLoginBO.getAuthorizationUrl(session);

        System.out.println("네이버 : " + naverAuthUrl);

        return "redirect:" + naverAuthUrl;
    } // end of naverUrl()

    @RequestMapping(value = "/kakaoUrl.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoUrl() {
        /* 네이버아이디로 인증 URL을 생성하기 위하여 naverLoginBO클래스의 getAuthorizationUrl메소드 호출 */
        String kakaoAuthUrl = kakaoLoginBO.getAuthorizationUrl(session);

        System.out.println("카카오 : " + kakaoAuthUrl);

        return "redirect:" + kakaoAuthUrl;
    } // end of kakaoUrl()

    // 네이버 callback
    @RequestMapping(value = "/callback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String naverCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("naver callBack 실행됨");
        // System.out.println(code);
        // System.out.println(state);
        OAuth2AccessToken oauthToken;
        oauthToken = naverLoginBO.getAccessToken(session, code, state);
        System.out.println("naverCallback, oauthToken : " + oauthToken);
        // 로그인 사용자 정보를 읽어온다.
        apiResult = naverLoginBO.getUserProfile(oauthToken);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult);
        JSONObject response_obj = (JSONObject) jsonObj.get("response");

        // 프로필 조회
        String email = (String) response_obj.get("email");
        String name = (String) response_obj.get("name");
        String birthday = (String) response_obj.get("birthday");
        String birthyear = (String) response_obj.get("birthyear");

        String birthdate = birthyear + birthday.substring(0, 2) + birthday.substring(3, 5);

        UserVO vo = service.selectOne(email);
        System.out.println("----- navercallback.do ----- ");
        System.out.println("vo : " + vo);
        System.out.println("email : " + email);

        if(vo != null){
            System.out.println("----- navercallback.do, vo null 아님 if문 실행 -----");

            return "loginSuccess.do?user1_email=" + email;
        }

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult);
        model.addAttribute("email", email);
        model.addAttribute("name", name);
        model.addAttribute("birthdate", birthdate);

        return "redirect:/naver_register_form.do";
    } // end of callback()

    // 카카오 callback
    @RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code){
        System.out.println("kakao callback 실행 됨");
        String access_token = kakaoLoginService.getKakaoAccessToken(code);
        System.out.println("access_token : " + access_token);

        HashMap<String, Object> userInfo = kakaoLoginService.getKakaoUserInfo(access_token);
        model.addAttribute("userInfo", userInfo);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaoCallback()

    // 카카오 callback
    /*@RequestMapping(value = "/kakaoCallback.do", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoCallback(Model model, @RequestParam String code, @RequestParam String state) throws Exception {
        System.out.println("kakao callback 실행 됨");
        // OAuth2AccessToken oAuth2AccessToken;
        // oAuth2AccessToken = kakaoLoginBO.getAccessToken(session, code, state);
        System.out.println("code : " + code);
        String accessToken = kakaoLoginBO.getAccessToken(session, code, state);
        // System.out.println("oAuth2AccessToken : " + oAuth2AccessToken);
        System.out.println("accessToken : " + accessToken);

        // 사용자 정보
        Map<String, Object> userInfo = kakaoLoginBO.getUserInfo(accessToken);
        System.out.println("userInfo : " + userInfo);
        model.addAttribute("userInfo", userInfo);


        // 로그인 사용자 정보를 읽어옴
        // apiResult2 = kakaoLoginBO.getUserProfile(oAuth2AccessToken);

        *//*JSONParser jsonParser = new JSONParser();
        JSONObject jsonObj;

        jsonObj = (JSONObject) jsonParser.parse(apiResult2);
        JSONObject response_obj1 = (JSONObject) jsonObj.get("kakao_account");
        JSONObject response_obj2 = (JSONObject) response_obj1.get("profile");

        // 프로필 조회
        String email = (String) response_obj1.get("email");
        String name = (String) response_obj2.get("nickname");
        System.out.println(email);
        System.out.println(name);

        // 세션에 사용자 정보 등록
        model.addAttribute("signIn", apiResult2);
        model.addAttribute("email", email);
        model.addAttribute("name", name);*//*

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of kakaocallback()*/

    @RequestMapping("/naver_register_form.do")
    public String naver_register_form(Model model, String name, String email, String birthdate) {
        // 네이버  로그인 정보 받아옴
        model.addAttribute("name", name);
        model.addAttribute("email", email);
        model.addAttribute("birthdate", birthdate);

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_form.do")
    public String register_form(Model model) {
        // 네이버  로그인 정보 받아옴

        return Common.Login.VIEW_PATH + "register_form.jsp";
    } // end of register()

    @RequestMapping("/register_detail_form.do")
    public String register_detail_form(Model model, UserVO vo) {
        model.addAttribute("vo", vo);
        return Common.Login.VIEW_PATH + "register_detail.jsp";
    } // end of register_detail()

    @RequestMapping("/register.do")
    public String register(Model model, UserVO vo) {
        int res = service.insert(vo);
        System.out.println(res);
        int check = 0;
        // 회원가입 성공, 실패, 첫 로드 확인
        if (res == 1) {
            check = 1;
        } else {
            check = 2;
        }
        model.addAttribute("check", check);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of register()

    @RequestMapping(value = "/user_login.do", method = {RequestMethod.POST, RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String user_login(UserVO vo) {
        System.out.println("------ user_login.do, vo 확인 ------");
        System.out.println("vo객체 : " + vo);
        System.out.println("vo.getUser1_email : " + vo.getUser1_email());
        System.out.println("vo.getUser1_pwd : " + vo.getUser1_pwd());

        String user_email = vo.getUser1_email();
        String user_pwd = vo.getUser1_pwd();


        String result = "";
        UserVO vo1 = service.selectOne(user_email);
        System.out.println("------ user_login.do, vo1 확인 ------");
        System.out.println("vo1 객체 : " + vo1);
        // System.out.println("vo1 이름 : " + vo1.getUser1_email());
        // System.out.println("vo1 비번 : " + vo1.getUser1_pwd());

        if (vo1 != null) {
            if (!user_email.equals(vo1.getUser1_email())) {
                System.out.println("----- if문 1 -----");
                result = "아이디 불일치";
                System.out.println("result : " + result);
            } else if (!user_pwd.equals(vo1.getUser1_pwd())) {
                System.out.println("----- if문 2 -----");
                result = "비밀번호 불일치";
                System.out.println("result : " + result);
            } else {
                System.out.println("----- if문 3 -----");
                result = "로그인 성공";
                System.out.println("result : " + result);
            }
        } else {
            System.out.println("----- if문 4 -----");
            result = "아이디 불일치";
            System.out.println("result : " + result);
        }

        return result;
    } // end of user_login()

    @RequestMapping("login_result.do")
    public String login_result(String check) {
        System.out.println("login_result() : " + check);
        return "redirect:/login.do?check=" + check;
    } // end of login_result()

    @RequestMapping("idMismatch.do")
    public String idMismatch(Model model, String user_email, String user_pwd) {
        System.out.println("----- idMismatch -----");
        System.out.println(user_email);
        System.out.println(user_pwd);

        model.addAttribute("user_email", user_email);
        model.addAttribute("user_pwd", user_pwd);

        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of idMismatch()

    @RequestMapping("loginSuccess.do")
    public String loginSuccess(String user1_email){
        System.out.println("----- loginSuccess.do 실행 -----");
        System.out.println("user1_email : " + user1_email);
        UserVO vo = service.selectOne(user1_email);
        System.out.println("vo : " + vo);
        session.setAttribute("user1", vo);

        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of loginSuccess()

    @RequestMapping("logout.do")
    public String logout(){
        session.removeAttribute("user1");
        return "redirect:/login.do";
    } // end of logout()

    @RequestMapping(value = "loginMismatch.do", method = {RequestMethod.POST, RequestMethod.GET})
    public String loginMismatch(Model model, String modal_email, String modal_pwd){
        System.out.println("----- loginMismatch.do -----");
        System.out.println("modal_email : " + modal_email);
        System.out.println("modal_pwd : " + modal_pwd);
        model.addAttribute("modal_email", modal_email);
        model.addAttribute("modal_pwd", modal_pwd);
        return Common.Login.VIEW_PATH + "login.jsp";
    } // end of loginMismatch()

    @RequestMapping(value = "idRepetitionCheck.do", produces = "application/json;charset=UTF-8")
    @ResponseBody
    public String idRepetitionCheck(String user1_email){
        UserVO vo = service.selectOne(user1_email);
        System.out.println("----- idRepetition.do -----");
        System.out.println("vo : " + vo);
        System.out.println("user1_email : " + user1_email);

        String result = "";
        if(vo == null){
            result = "가능";
        } else{
            result = "불가능";
        }

        System.out.println("result : " + result);
        return result;
    } // end of idRepetitionCheck()

    @RequestMapping("my_information_modify.do")
    public String myInformationModify() {
        System.out.println("----- my_information_modify.do -----");

        return Common.Login.VIEW_PATH + "register_modify.jsp";
    } // end of myInformationModify()

    @RequestMapping("register_modify.do")
    public String registerModify(Model model, UserVO vo) throws IllegalAccessException {

        System.out.println("----- register_modify.do -----");
        Object voObj = vo;
        for(Field field : voObj.getClass().getDeclaredFields()){
            field.setAccessible(true);
            Object value = field.get(voObj);
            System.out.println("field : " + field.getName() + " , value : " + value);
        } // end of for

        int res = service.update(vo);

        model.addAttribute("res", res);
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of registerModify()

    @ResponseBody
    @RequestMapping(value = "formValid.do", produces = "application/json;charset=UTF-8")
    public String formValid(@RequestParam String isCheck){
        System.out.println("===== formValid.do =====");
        String result = "";
        System.out.println("isCheck : " + isCheck);

        if(isCheck.equals("1")){
            result = "1";
        } else if(isCheck.equals("2")){
            result = "2";
        }

        System.out.println("result : " + result);
        return result;
    } // end of formValid()

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import util.Buy;
import util.NicePayKey;

@Controller
public class PayController implements Buy, NicePayKey {

	private final RestTemplate restTemplate = new RestTemplate();
	private final ObjectMapper objectMapper = new ObjectMapper();

	@RequestMapping(value = "/cancel")
	public String cancelDemo() {
		return "/cancel";
	}
	
	@RequestMapping("/bill.do")
	public String Bill(HttpServletRequest request, Model model) {
		UUID id = UUID.fromString(request.getParameter("orderId"));
		String resultMsg = request.getParameter("resultMsg");
		String resultCode = request.getParameter("resultCode");
		model.addAttribute("orderId", id);
		model.addAttribute("clientId", CLIENT_ID);
		model.addAttribute("resultMsg", resultMsg);

		if (resultCode.equalsIgnoreCase("0000")) {
			// 결제 성공 비즈니스 로직 구현
		} else {
			// 결제 실패 비즈니스 로직 구현
		}

		// 응답 request body 로그 확인
		Enumeration<String> params = request.getParameterNames();
		while (params.hasMoreElements()) {
			String paramName = params.nextElement();
			System.out.println(paramName + " : " + request.getParameter(paramName));
		}

		return PAY_RESPONSE;
	}

	@RequestMapping("/cancelAuth")
	public String requestCancel(@RequestParam String tid, @RequestParam String amount, Model model) throws Exception {

		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization",
				"Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> AuthenticationMap = new HashMap<String, Object>();
		AuthenticationMap.put("amount", amount);
		AuthenticationMap.put("reason", "test");
		AuthenticationMap.put("orderId", UUID.randomUUID().toString());

		HttpEntity<String> request = new HttpEntity<String>(objectMapper.writeValueAsString(AuthenticationMap), headers);

		ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
				"https://sandbox-api.nicepay.co.kr/v1/payments/" + tid + "/cancel", request, JsonNode.class);

		JsonNode responseNode = responseEntity.getBody();
		String resultCode = responseNode.get("resultCode").asText();
		model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

		System.out.println(responseNode.toString());

		if (resultCode.equalsIgnoreCase("0000")) {
			// 취소 성공 비즈니스 로직 구현
		} else {
			// 취소 실패 비즈니스 로직 구현
		}

		return "/response";
	}

	@RequestMapping("/hook")
	public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
		String resultCode = hookMap.get("resultCode").toString();

		System.out.println(hookMap);
		
		if (resultCode.equalsIgnoreCase("0000")) {
            return new ResponseEntity<String>("ok", HttpStatus.OK);
        }

        return new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package asdf;

public enum sasfd {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package exam;

public class Exam {
	void setup() {
		Serial.begin(9600);
		pinMode(13, INPUT);
	}

	void loop() {
	

	int n = digitalRead(13);
	float voltage = 0.0;
	float tmp = 0.0;if(n==HIGH)
	
		voltage = analogRead(14) * 5.0 / 1024.0;
		tmp = voltage * 100 - 50;
		Serial.println(tmp);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import util.Buy;
import util.Common;

@Controller
public class MainController {
    @RequestMapping("/")
    public String mainofmain(){
    	System.out.println("main");
        return Common.Main.VIEW_PATH+"main_of_main.jsp";
    } // main of main()

    @RequestMapping(value = {"/main.do"})
    public String main() {
        return Common.Main.VIEW_PATH + "main.jsp";
    } // end of main()
    
    @RequestMapping("/buy.do")
    public String buy() {
    	return Buy.PAY;
    }



} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;


import service.EventService;
import util.Common;
import vo.EventVO;

@Controller
public class EventController {
	
	@Autowired
	HttpServletRequest request;
	
	@Autowired
	ServletContext app;
	
	private EventService service;
	
	@Autowired
	public EventController(EventService service) {
		this.service = service;
		
	}
	
	@RequestMapping("/event.do")
	public String selectList(Model model) {
		List<EventVO> event_list = service.selectList();
		model.addAttribute("event_list", event_list);
		return Common.Event.VIEW_PATH + "event_main.jsp";
	}
	
	@RequestMapping("/event_detail.do")
	public String selectOne(Model model, int event_idx) {
		EventVO event_detail = service.selectOne(event_idx);
		model.addAttribute("event_detail", event_detail);
		return Common.Event.VIEW_PATH + "event_detail.jsp";
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
module asdf {
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package util;

public class Common {
	public static class User{
		public static final String VIEW_PATH = "/WEB-INF/views/user/";
	} // end of User class

	public static class Main{
		public static final String VIEW_PATH = "/WEB-INF/views/main/";
	} // end of Main class

	public static class full_view{
		public static final String VIEW_PATH = "/WEB-INF/views/full_view/";
	} // end of full_view class

	public static class Login{
		public static final String VIEW_PATH = "/WEB-INF/views/login/";
	} // end of Login class

	public static class Detail_view{
		public static final String VIEW_PATH = "/WEB-INF/views/detail_view/";
	}

	public static class Review_view2{
		public static final String VIEW_PATH = "/WEB-INF/views/review_test/";
	}

	public static class Temporary_view{
		public static final String VIEW_PATH = "/WEB-INF/views/Temporary/";
	}
	
	public static class Review{
		public static final String VIEW_PATH = "/WEB-INF/views/review/";
	}
	
	public static class Event{
		public static final String VIEW_PATH = "/WEB-INF/views/event/";
	}

	public static class Board{
		public static final String VIEW_PATH = "/WEB-INF/views/board_view/";

		// 한 페이지에 보여줄 게시글 갯수
		public final static int BLOCKLIST = 5;

		// 한 화면에 보여질 페이지 메뉴 수
		// < 1 2 3 >
		public final static int BLOCKPAGE = 3;

	} // end of Board class

} // end of class

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import dao.FullViewDAO;
import service.FullViewService;
import util.Common;
import vo.FullViewVO;
import vo.SearchVO;

@Controller
public class FullViewController {
	
	@Autowired
	HttpServletRequest request;

	@Autowired
	ServletContext app;

	
	private FullViewService service;
	
	@Autowired
	public FullViewController(FullViewService service) {
		this.service = service;
		System.out.println("FullViewController : " + service );
	}
	
	@RequestMapping("/fullview.do")
	public String selectList(Model model) {
		List<FullViewVO> product_list = service.selectList();
		int product_count = service.selectCount();
		model.addAttribute("product_count", product_count);
		model.addAttribute("product_list", product_list);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/search.do")
	public String search_select(Model model, SearchVO vo) {
		
		//System.out.println(vo.getProduct_type());
		List<FullViewVO> product_list = service.search_select(vo);
		int product_count = service.selectSearchCount(vo);
		model.addAttribute("product_list", product_list);
		model.addAttribute("selection", vo);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	@RequestMapping("/typing_search.do")
	public String typing_search(Model model, String search) {
		List<FullViewVO> product_list = service.typing_search(search);
		int product_count = service.typing_searchCount(search);
		model.addAttribute("product_list", product_list);
		model.addAttribute("product_count", product_count);
		return Common.full_view.VIEW_PATH + "full_view_lsj.jsp";
	}
	
	

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:234)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:348)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:103)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1278)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor.enterModule(CompilationUnitStructureRequestor.java:528)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:627)
	at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:482)
	at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:1141)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:234)
	... 20 more

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:06:58.050
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:06:58.055
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:07:48.468
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:07:48.471
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:08:24.308
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:08:24.312
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:08:43.879
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:08:43.882
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:11:44.674
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:11:44.680
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:13:08.368
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:13:08.371
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:17:36.166
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:17:36.169
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:19:13.059
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:19:13.063
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:27:01.290
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:27:01.294
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:27:51.674
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:27:51.675
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:32:47.518
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:32:47.521
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:32:55.374
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 16:32:55.381
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:06:52.921
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:06:52.922
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:09:15.797
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:09:15.799
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:09:53.437
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:09:53.438
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:12:33.434
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:12:33.436
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:13:05.419
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:13:05.420
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:14:40.515
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:14:40.515
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:14:44.172
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:14:44.173
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:17:15.233
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:17:15.234
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:17:34.882
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:17:34.885
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:30:25.668
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:30:25.671
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:32:00.993
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:32:00.996
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:34:06.305
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:34:06.308
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:40:05.734
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-05-11 17:40:05.739
!MESSAGE Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!
